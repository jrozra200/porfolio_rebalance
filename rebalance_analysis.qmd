---
title: "financial_analysis"
format: html
---

```{r}
# Install quantmod if you haven't already
# install.packages("quantmod")

# Load the quantmod package
library(quantmod)
library(stringr)
library(dplyr)
library(lubridate)
library(ggplot2)

options(scipen = 999)

# Set the ticker symbol for SPY ETF
ticker <- "SPY"

# Get historical data for SPY
getSymbols(ticker, src = "yahoo", auto.assign = TRUE)

names(SPY) <- str_remove(names(SPY), "SPY\\.")

stock_dat <- as_tibble(SPY) %>%
    mutate(date = index(SPY), 
           symbol = ticker, 
           week = week(date),
           year = year(date))
```

# Week Rebalancing

```{r}

dates <- stock_dat %>% 
    group_by(year, week) %>% 
    summarise(week_ending = max(date))

dat <- stock_dat %>% 
    inner_join(dates, by = c("date" = "week_ending",
                             "year" = "year",
                             "week" = "week")) %>% 
    select(symbol, date, Close) %>% 
    mutate(Open = lag(Close), 
           rate_change = (Close - Open) / Open) %>%
    rename(week_ending = date) %>% 
    filter(week_ending >= as_date("2020-01-01")) %>% 
    mutate(start_stock = as.numeric(NA),
           start_cash = as.numeric(NA),
           end_stock = as.numeric(NA),
           rebal_cash = as.numeric(NA),
           rebal_stock = as.numeric(NA),
           long_start = as.numeric(NA),
           long_end = as.numeric(NA))



start_stock <- 500
long_start <- 1000

for(i in 1:dim(dat)[1]) {
    rate_change <- dat$rate_change[i]
    
    start_cash <- start_stock
    end_stock <- start_stock * (rate_change + 1)
    
    total <- end_stock + start_cash
    rebal <- total / 2
    
    dat$start_stock[i] <- start_stock
    dat$start_cash[i] <- start_cash
    dat$end_stock[i] <- end_stock
    dat$rebal_cash[i] <- rebal
    dat$rebal_stock[i] <- rebal
    
    start_stock <- rebal
    
    # ----- # 
    
    long_end <- long_start * (rate_change + 1)
    
    dat$long_start[i] <- long_start
    dat$long_end[i] <- long_end
    
    long_start <- long_end
    
}
```

```{r}
ggplot(dat, aes(x = week_ending)) + 
    geom_line(aes(y = rebal_stock * 2), color = "blue") + 
    geom_line(aes(y = long_end))
```


# Day Rebalance 

```{r}
dat <- stock_dat %>% 
    select(symbol, date, Close) %>% 
    mutate(Open = lag(Close), 
           rate_change = (Close - Open) / Open) %>%
    filter(date >= as_date("2020-01-01")) %>% 
    mutate(start_stock = as.numeric(NA),
           start_cash = as.numeric(NA),
           end_stock = as.numeric(NA),
           rebal_cash = as.numeric(NA),
           rebal_stock = as.numeric(NA),
           long_start = as.numeric(NA),
           long_end = as.numeric(NA))



start_stock <- 500
long_start <- 1000

for(i in 1:dim(dat)[1]) {
    rate_change <- dat$rate_change[i]
    
    start_cash <- start_stock
    end_stock <- start_stock * (rate_change + 1)
    
    total <- end_stock + start_cash
    rebal <- total / 2
    
    dat$start_stock[i] <- start_stock
    dat$start_cash[i] <- start_cash
    dat$end_stock[i] <- end_stock
    dat$rebal_cash[i] <- rebal
    dat$rebal_stock[i] <- rebal
    
    start_stock <- rebal
    
    # ----- # 
    
    long_end <- long_start * (rate_change + 1)
    
    dat$long_start[i] <- long_start
    dat$long_end[i] <- long_end
    
    long_start <- long_end
    
}
```

```{r}
ggplot(dat, aes(x = date)) + 
    geom_line(aes(y = rebal_stock * 2), color = "blue") + 
    geom_line(aes(y = long_end))
```


```{r}
dat <- stock_dat %>% 
    select(symbol, date, Close) %>% 
    mutate(Open = lag(Close), 
           rate_change = (Close - Open) / Open) %>%
    filter(date >= as_date("2020-01-01")) %>% 
    mutate(rate_change = rate_change + 1)

tmp <- tibble(
    symbol = "SPY",
    date = as_date("2020-01-01"),
    Close = NA,
    Open = NA,
    rate_change = NA,
    long_change = 1000,
    start_cash = 500,
    start_stock = 500,
    total_start = start_cash + start_stock
)

dat <- bind_rows(tmp, dat)

dat <- dat %>% 
    mutate(long_change = ifelse(is.na(long_change), rate_change, long_change),
           long_change = cumprod(long_change))

dat <- dat %>% 
    mutate(start_cash = lag(start_cash),
           start_stock = lag(start_stock),
           total_start = lag(total_start),
           stock_end = as.numeric(NA),
           stock_change = as.numeric(NA),
           rebalance_amt = as.numeric(NA),
           rebalance_stock = as.numeric(NA),
           rebalance_cash = as.numeric(NA),
           rebalanced_total = as.numeric(NA))

for(i in 2:dim(dat)[1]) {
    if(i > 2) {
        dat$start_cash[i] <- dat$rebalance_cash[i - 1]
        dat$start_stock[i] <- dat$rebalance_stock[i - 1]
        dat$total_start[i] <- dat$rebalanced_total[i - 1]
    }
    
    dat$stock_end[i] <- dat$start_stock[i] * dat$rate_change[i]
    dat$stock_change[i] <- dat$stock_end[i] - dat$start_stock[i]
    dat$rebalance_amt[i] <- dat$stock_change[i] / 2
    dat$rebalance_stock[i] <- dat$stock_end[i] - dat$rebalance_amt[i]
    dat$rebalance_cash[i] <- dat$start_cash[i] + dat$rebalance_amt[i]
    dat$rebalanced_total[i] <- dat$rebalance_stock[i] + dat$rebalance_cash[i]
}

ggplot(dat, aes(x = date)) + 
    geom_line(aes(y = rebalanced_total), color = "blue") + 
    geom_line(aes(y = long_change))
```

